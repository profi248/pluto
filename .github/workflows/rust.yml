name: Build and run unit tests on all components

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-all-linux:
    runs-on: ubuntu-latest
    name: Build and test all on Linux
    steps:
    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16.x'
    - uses: actions/checkout@v3
    - name: Install npm dependencies
      run: cd node-service-web/frontend && npm install
    - name: Build the frontend
      run: cd node-service-web/frontend && npm run build
    - name: Build release
      run: cargo build --release --verbose
    - name: Run tests
      run: cargo test --verbose
    - name: Run loom tests
      run: LOOM_MAX_PREEMPTIONS=5 RUSTFLAGS='--cfg loom' cargo test -p pluto-utils --release
    - uses: actions/upload-artifact@v3
      with:
        name: linux-coordinator
        path: target/release/pluto-coordinator
    - uses: actions/upload-artifact@v3
      with:
        name: linux-node
        path: target/release/pluto-node-service-web
  build-client-windows:
    runs-on: windows-2019
    name: Build and test client on Windows
    env:
      SQLITE3_LIB_DIR: "C:\\sqlite"
    steps:
    - name: "Install SQLite"
      shell: cmd
      run: |
          mkdir C:\sqlite
          CD /D C:\sqlite
          curl -fsS --retry 3 --retry-connrefused -o sqlite3.zip https://sqlite.org/2022/sqlite-dll-win64-x64-3380500.zip
          7z e sqlite3.zip -y
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          lib /machine:x64 /def:sqlite3.def /out:sqlite3.lib
          set PATH=%PATH%;C:\sqlite
          echo "##vso[task.setvariable variable=PATH;]%PATH%;C:\sqlite"
    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16.x'
    - uses: actions/checkout@v3
    - name: Install npm dependencies
      run: cd node-service-web/frontend && npm install
    - name: Build the frontend
      run: cd node-service-web/frontend && npm run build
    - name: Build release
      run: cargo build --release --verbose --workspace --exclude pluto-coordinator
    - name: Run tests
      run: cargo test --verbose --workspace --exclude pluto-coordinator
    - uses: actions/upload-artifact@v3
      with:
        name: windows-node
        path: target/release/pluto-node-service-web.exe
  build-client-mac:
    runs-on: macos-latest
    name: Build and test client on macOS
    steps:
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'
      - uses: actions/checkout@v3
      - name: Install npm dependencies
        run: cd node-service-web/frontend && npm install
      - name: Build the frontend
        run: cd node-service-web/frontend && npm run build
      - name: Build release
        run: cargo build --release --verbose --workspace --exclude pluto-coordinator
      - name: Run tests
        run: cargo test --verbose --workspace --exclude pluto-coordinator
      - uses: actions/upload-artifact@v3
        with:
          name: macos-node
          path: target/release/pluto-node-service-web
#  miri-linux:
#    name: Test with Miri on Linux
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - name: Install Miri
#        run: |
#          rustup toolchain install nightly --component miri
#          rustup override set nightly
#          cargo miri setup
#      - name: Test with Miri
#        run: cargo miri test --verbose
